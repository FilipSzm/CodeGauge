import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'java'
    id 'application'
    id 'antlr'
}

group 'com.filipszm.codegauge'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    implementation 'commons-cli:commons-cli:1.4'

    // antlr
    implementation 'org.antlr:antlr4'
    antlr "org.antlr:antlr4:4.13.1"
}

generateGrammarSource {
    arguments += ['-visitor', '-listener']
    arguments += ['-package', project.group]
    outputDirectory = file("$buildDir/generated-src/antlr/main/${project.group}")
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '18'
    targetCompatibility = '18'
}

application {
    mainClass = "${project.group}.CodeGauge"
}

tasks.register('downloadGrammars', DefaultTask) {
    doLast {
        def urls = [
                'https://raw.githubusercontent.com/antlr/grammars-v4/3fd48c00f75fd1ab2e51d0100772020d9c71b3b6/java/java20/Java20Lexer.g4',
                'https://raw.githubusercontent.com/antlr/grammars-v4/3fd48c00f75fd1ab2e51d0100772020d9c71b3b6/java/java20/Java20Parser.g4'
        ]
        def files = [
                project.projectDir.toPath().resolve('src/main/antlr/Java20Lexer.g4'),
                project.projectDir.toPath().resolve('src/main/antlr/Java20Parser.g4')
        ]

        urls.eachWithIndex { urlStr, idx ->
            def url = new URL(urlStr)
            def file = files[idx]

            if (!Files.exists(file.getParent())) {
                Files.createDirectories(file.getParent())
            }
            url.withInputStream { input ->
                Files.copy(input, file, StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}

tasks.named('generateGrammarSource').configure {
    dependsOn 'downloadGrammars'
}

jar {
    manifest {
        attributes(
                'Main-Class': "${project.group}.CodeGauge"
        )
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}